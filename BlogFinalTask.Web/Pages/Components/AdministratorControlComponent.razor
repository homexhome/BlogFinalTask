@using BlogFinalTask.Data.CustomDataExceptions
@inject IRepositoryCollection repo
@inject AuthenticationStateProvider authState
@inject UserManager<CustomIdentity> userManager
@inject RoleManager<CustomRole> roleManager
@inject SignInManager<CustomIdentity> signInManager

<AuthorizeView>
    <Authorized>
        <RadzenDataGrid @ref="usersGrid" AllowAlternatingRows="false" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@allUsers" TItem="CustomUserTransferModel" RowUpdate="@OnUpdateRow">
            <Columns>
                <RadzenDataGridColumn TItem="CustomUserTransferModel" Property="UserName" Title="User Name" Width="200px">
                    <EditTemplate Context="user">
                        <RadzenTextBox @bind-Value="user.UserName" Style="width:100%; display: block" Name="UserName" />
                        <RadzenRequiredValidator Text="Name is Required" Component="UserName" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomUserTransferModel" Property="UserRole" Title="User Role" Width="200px">
                    <EditTemplate Context="user">
                        <RadzenDropDown @bind-Value="user.UserRole" Data="@allUserRoles" Style="width:100%; display: block" Name="UserRole" />
                        <RadzenRequiredValidator Text="Role is Required" Component="UserRole" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CustomUserTransferModel" Context="user" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="150px">
                    <Template Context="user">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="user">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(user))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(user))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(user))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>

            </Columns>
        </RadzenDataGrid>
    </Authorized>
    <NotAuthorized>
        <AccessErrorPageComponent/>
    </NotAuthorized>
</AuthorizeView>



@code {
    List<CustomUserTransferModel>? allUsers;
    RadzenDataGrid<CustomUserTransferModel>? usersGrid;
    AdministratorService? administratorService;
    List<string> allUserRoles = new();

    protected override async Task OnInitializedAsync() {
        administratorService = new(userManager, roleManager, repo, signInManager);
        allUsers = await administratorService.GetAllUsers();
        allUserRoles = await administratorService.GetAllRolesList();
    }


    async Task OnUpdateRow(CustomUserTransferModel users) {
        administratorService = new(userManager, roleManager, repo, signInManager);
        await administratorService.UpdateUser(users);
        await administratorService.SaveChangesAsync();
    }
    async Task EditRow(CustomUserTransferModel users) {
        StateHasChanged();
        await usersGrid!.EditRow(users);

    }
    async Task SaveRow(CustomUserTransferModel users) {
        await usersGrid!.UpdateRow(users);
    }

    void CancelEdit(CustomUserTransferModel users) {
        usersGrid!.CancelEditRow(users);
    }
    void DeleteRow(CustomUserTransferModel users) {
    }
}
