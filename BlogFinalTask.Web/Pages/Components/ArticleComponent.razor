@inject IRepositoryCollection repo
@inject AuthenticationStateProvider authState
@inject NavigationManager navigationManager



<RadzenDataGrid @ref="articleGrid" AllowPaging="true" PageSize="10" Data="@articles" TItem="ArticleDTO" AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn TItem="ArticleDTO" Sortable="true" Filterable="true" TextAlign="TextAlign.Left" Width="100px" Title="Статья">
            <Template Context="article">
                <div class="article-container">
                <div style="margin-bottom: 10px; font-weight: bold;">@article.Title</div>
                @if (article.Tags is not null) {
                    foreach (var tag in article.Tags) {
                        <div class="tag">@tag.Text</div>
                    }
                }
                    <div>@article.Content</div>
                    <AuthorizeView>
                        <button @onclick="()=> ViewComments(article.Id)">Просмотреть комментарии</button>
                        <button @onclick="()=> EditArticle(article.Id)">Редактировать статью</button>
                    </AuthorizeView>
                </div>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>


@code {
    List<ArticleDTO>? articles;
    RadzenDataGrid<ArticleDTO>? articleGrid;

    protected async override Task OnInitializedAsync() {
        articles = await ReturnAllArticles();
    }

    async Task<List<ArticleDTO>> ReturnAllArticles() {
        AuthenticationState auth = await authState.GetAuthenticationStateAsync();
        List<ArticleDTO> articles = await repo.Article.GetAllAsync(auth.User);
        foreach (var article in articles) {
            article.Tags = await repo.ArticleTags.GetArticleTagsById(article.Id);
        }
        return articles;

    }
    void ViewComments(string articleId) {
        navigationManager.NavigateTo($"/ArticleDetails/{articleId}");
    }
    void EditArticle(string articleId) {
        navigationManager.NavigateTo($"/ArticleEdit/{articleId}");
    }
}
